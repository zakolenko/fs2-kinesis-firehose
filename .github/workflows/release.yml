name: build

on:
  pull_request:
    branches: ['*']
  push:
    branches: ['*']
    tags: ["v[0-9]+*"]

jobs:
#  jvm-tests:
#    name: JVM (scala ${{ matrix.scala }}, jvm ${{ matrix.java }})
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest]
#        java: [8, 11]
#        scala: [2.13.3, 3.7.1]
#        command: ["ci-jvm"]
#
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: olafurpg/setup-scala@v10
#        with:
#          java-version: "adopt@1.${{ matrix.java }}"
#
#      - name: sbt ++${{ matrix.scala }} ${{ matrix.command }}
#        run: |
#          ./.github/scripts/build.sh
#        env:
#          SCALA_VERSION: ${{ matrix.scala }}
#          SBT_COMMAND: ${{ matrix.command }}
#
#  package-tests:
#    name: Package (scala ${{ matrix.scala }}, jvm ${{ matrix.java }})
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest]
#        java: [11]
#        scala: [2.13.3, 3.7.1]
#        command: [ci-package]
#
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: olafurpg/setup-scala@v10
#        with:
#          java-version: "adopt@1.${{ matrix.java }}"
#
#      - name: sbt ++${{ matrix.scala }} ${{ matrix.command }}
#        run: |
#          ./.github/scripts/build.sh
#        env:
#          SCALA_VERSION: ${{ matrix.scala }}
#          SBT_COMMAND: ${{ matrix.command }}

  #-----------------------------------------------------------------------------------
  # Publishing tasks
  #-----------------------------------------------------------------------------------

  publish_sonatype:
    name: Publish to Sonatype
    if: github.event_name == 'push' # && startsWith(github.ref, 'refs/tags/v')
#    needs: [ jvm-tests, package-tests ]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        command: [ci-release]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: "adopt@1.8"

      - name: Import signing key
        if: env.PGP_SECRET != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - | gpg --import --no-tty --batch --yes
          gpg --list-secret-keys

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          gpg --list-secret-keys
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - name: Test GPG Signing
        run: |
          echo "test" > test.txt
          gpg --batch --pinentry-mode loopback --detach-sign --armor --output test.txt.asc test.txt
          ls -l test.txt.asc
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}

      - name: sbt ci-release
        run: |
          sbt +clean ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
